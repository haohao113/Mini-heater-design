;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;#include <math.h>
;#include <stdlib.h>
;
;#define F_CPU 8000000UL
;
;#define ADC_VREF_TYPE ((0 << REFS1) | (1 << REFS0) | (0 << ADLAR))
;
;// Pin definitions
;#define BUTTON1 0
;#define BUTTON2 2
;#define BUTTON3 3
;#define BUTTON4 1
;
;#define RELAY1 4
;#define RELAY2 5
;
;// Default values
;#define DEFAULT_TEMPERATURE_THRESHOLD 30
;
;#define TEMP_PIN 0 // C?m bi?n nhi?t d? k?t n?i t?i chân A0
;
;#define TEMP_MIN 30 // Minimum temperature for fan to start
;#define TEMP_MAX 40 // Maximum temperature for fan to run at full speed
;
;char buffer_temp[16];
;
;// Global variables
;unsigned char mode = 0; // 0 for manual, 1 for automatic
;unsigned int temp_value;
;unsigned int temp_min = TEMP_MIN, temp_max = TEMP_MAX;
;int temp_int;
;int auto_temperature_threshold = DEFAULT_TEMPERATURE_THRESHOLD;

	.DSEG
;
;void ADC_init()
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028   // Ch?n AVCC làm di?n áp tham chi?u, không kích ho?t ch?c nang left adjust
; 0000 0029   ADMUX = (1 << REFS0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002A 
; 0000 002B   // Kích ho?t ADC, không ch?n ch? d? chuy?n d?i liên t?c
; 0000 002C   ADCSRA = (1 << ADEN);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002D 
; 0000 002E   // Ch?n ch? d? chia t? l? 64 (8MHz / 64 = 125kHz)
; 0000 002F   ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0030 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 0033 {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0034   // Switch ADC channel
; 0000 0035   ADMUX = (ADMUX & 0xF8) | (adc_input & 0x07);
;PCODE: $0000001A VOL: 0
;	adc_input -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0036   // Wait for channel switch to take effect
; 0000 0037   delay_us(10);
;PCODE: $00000022 VOL: 0
; 0000 0038   // Start a new AD conversion
; 0000 0039   ADCSRA |= (1 << ADSC);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003A   // Wait for the conversion to complete
; 0000 003B   while ((ADCSRA & (1 << ADIF)) == 0)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003C     ;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003D   // Clear the ADIF bit
; 0000 003E   ADCSRA |= (1 << ADIF);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003F   return ADCW;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0040 }
;PCODE: $00000030 VOL: 0
;
;unsigned int map(unsigned int x, unsigned int in_min, unsigned int in_max, unsigned int out_min, unsigned int out_max)
; 0000 0043 {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0044   return ((long)(x - in_min) * (long)(out_max - out_min)) / (in_max - in_min) + out_min;
;PCODE: $00000033 VOL: 0
;	x -> Y+8
;	in_min -> Y+6
;	in_max -> Y+4
;	out_min -> Y+2
;	out_max -> Y+0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0045 }
;PCODE: $0000004A VOL: 0
;
;float temperature;
;float R1 = 10000;

	.DSEG
;float logR2, R2, T, temp;
;float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
;
;float get_temp()
; 0000 004D {

	.CSEG
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 004E   float Vo = read_adc(TEMP_PIN);
; 0000 004F   R2 = R1 * (1023.0 / Vo - 1.0);
;PCODE: $0000004D VOL: 0
;	Vo -> Y+0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0050   logR2 = log(R2);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0051   T = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0052   return T - 273.15; // d? C
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0053 }
;PCODE: $00000076 VOL: 0
;
;void main(void)
; 0000 0056 {
;PCODE: $00000077 VOL: 0
; 0000 0057 
; 0000 0058   // Initialize heater pin as output
; 0000 0059   DDRD |= (1 << RELAY1);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005A   PORTD |= (1 << RELAY1);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 005B   DDRD |= (1 << RELAY2);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 005C   PORTD |= (1 << RELAY2);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005D 
; 0000 005E   // Initialize button pins as input
; 0000 005F   DDRD &= ~((1 << BUTTON1) | (1 << BUTTON2) | (1 << BUTTON3) | (1 << BUTTON4));
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0060   PORTD |= ((1 << BUTTON1) | (1 << BUTTON2) | (1 << BUTTON3) | (1 << BUTTON4));
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0061 
; 0000 0062   // Initialize LCD
; 0000 0063   lcd_init(16);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0064   ADC_init();
;PCODE: $00000088 VOL: 0
; 0000 0065 
; 0000 0066   while (1)
;PCODE: $00000089 VOL: 0
; 0000 0067   {
; 0000 0068     if (!(PIND & (1 << BUTTON1)))
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0069     {
; 0000 006A       mode++;
;PCODE: $0000008D VOL: 0
; 0000 006B       if (mode > 2)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 006C         mode = 0;
;PCODE: $00000091 VOL: 0
; 0000 006D       while (!(PIND & (1 << BUTTON1)))
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 006E         ; // Wait until the button is released
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 006F     }
; 0000 0070 
; 0000 0071     if (mode == 0)
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0072     {
; 0000 0073       lcd_clear();
;PCODE: $0000009C VOL: 0
; 0000 0074       lcd_gotoxy(5, 0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0075       lcd_puts("Manual");
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0076 
; 0000 0077       temperature = get_temp();
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0078       temp_int = (int)temperature;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0079       sprintf(buffer_temp, "Temp: %d\xDF"
; 0000 007A                            "C",
; 0000 007B               temp_int);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 007C       lcd_gotoxy(0, 1);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 007D       lcd_puts(buffer_temp);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 007E       // If the manual button is pressed, toggle the heater
; 0000 007F       if (!(PIND & (1 << BUTTON4)))
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0080       {
; 0000 0081         PORTD ^= (1 << RELAY1);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0082         while (!(PIND & (1 << BUTTON4)))
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0083           ; // Wait until the button is released
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0084       }
; 0000 0085       if (!(PIND & (1 << BUTTON3)))
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0086       {
; 0000 0087         PORTD ^= (1 << RELAY2);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0088         while (!(PIND & (1 << BUTTON3)))
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0089           ; // Wait until the button is released
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 008A       }
; 0000 008B     }
;PCODE: $000000D6 VOL: 0
; 0000 008C     else if (mode == 1)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 008D     {
; 0000 008E       lcd_clear();
;PCODE: $000000DC VOL: 0
; 0000 008F       lcd_gotoxy(6, 0);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0090       lcd_puts("Auto");
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0091 
; 0000 0092       // Read temperature from sensor
; 0000 0093       temperature = get_temp();
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0094       temp_int = (int)temperature;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0095 
; 0000 0096       // Display temperature on LCD
; 0000 0097       sprintf(buffer_temp, "T: %d\xDF"
; 0000 0098                            "C",
; 0000 0099               temp_int);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 009A       lcd_gotoxy(0, 1);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 009B       lcd_puts(buffer_temp);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 009C 
; 0000 009D       sprintf(buffer_temp, "M: %d\xDF"
; 0000 009E                            "C",
; 0000 009F               auto_temperature_threshold);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00A0       lcd_gotoxy(8, 1);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00A1       lcd_puts(buffer_temp);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00A2 
; 0000 00A3       // If temperature is above the auto level, turn off the heater
; 0000 00A4       if (temp_int > auto_temperature_threshold)
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00A5       {
; 0000 00A6         PORTD |= (1 << RELAY1);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00A7         PORTD &= ~(1 << RELAY2);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00A8       }
; 0000 00A9       // If temperature is below the auto level, turn on the heater
; 0000 00AA       else if (temp_int < auto_temperature_threshold)
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00AB       {
; 0000 00AC         PORTD &= ~(1 << RELAY1);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00AD         PORTD &= ~(1 << RELAY2);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00AE       }
; 0000 00AF     }
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00B0     else
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00B1     {
; 0000 00B2       lcd_clear();
;PCODE: $00000121 VOL: 0
; 0000 00B3       lcd_gotoxy(0, 0);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00B4       lcd_puts("Setting");
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00B5 
; 0000 00B6       // Display auto_temperature_threshold on LCD
; 0000 00B7       sprintf(buffer_temp, "Threshold: %d\xDF"
; 0000 00B8                            "C",
; 0000 00B9               auto_temperature_threshold);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00BA       lcd_gotoxy(0, 1);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00BB       lcd_puts(buffer_temp);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00BC 
; 0000 00BD       // Adjust the auto temperature threshold
; 0000 00BE       if (!(PIND & (1 << BUTTON2)))
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00BF       {
; 0000 00C0         auto_temperature_threshold++;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00C1         delay_ms(100);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00C2         //                while (!(PIND & (1 << BUTTON2)))
; 0000 00C3         //                    ; // Wait until the button is released
; 0000 00C4       }
; 0000 00C5       if (!(PIND & (1 << BUTTON3)))
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00C6       {
; 0000 00C7         auto_temperature_threshold--;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00C8         delay_ms(100);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00C9         //                while (!(PIND & (1 << BUTTON3)))
; 0000 00CA         //                    ; // Wait until the button is released
; 0000 00CB       }
; 0000 00CC     }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00CD 
; 0000 00CE     delay_ms(100);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00CF   }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00D0 }
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0

	.DSEG
_0x14:
	.BYTE 0x14
